# license:BSD-3-Clause
# copyright-holders:Olivier Galibert
# NMOS 6502 opcodes
# Verified with visual6502
#   documented opcodes

adc_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	TMP2 = read(TMP);
	do_adc(TMP2);
	prefetch();

adc_abx
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	if(page_changing(TMP, X)) {
		read(set_l(TMP, TMP+X));
	}
	TMP += X;
	TMP2 = read(TMP);
	do_adc(TMP2);
	prefetch();

adc_aby
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	if(page_changing(TMP, Y)) {
		read(set_l(TMP, TMP+Y));
	}
	TMP += Y;
	TMP2 = read(TMP);
	do_adc(TMP2);
	prefetch();

adc_idx
	TMP2 = read(PC);
	PC++;
	read(TMP2);
	TMP2 += X;
	TMP = read(TMP2 & 0xff);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	TMP2 = read(TMP);
	do_adc(TMP2);
	prefetch();

adc_idy
	TMP2 = read(PC);
	PC++;
	TMP = read(TMP2);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	if(page_changing(TMP, Y)) {
		read(set_l(TMP, TMP+Y));
	}
	TMP2 = read(TMP+Y);
	do_adc(TMP2);
	prefetch();

adc_imm
	TMP = read(PC);
	PC++;
	do_adc(TMP);
	prefetch();

adc_zpg
	TMP = read(PC);
	PC++;
	TMP2 = read(TMP);
	do_adc(TMP2);
	prefetch();

adc_zpx
	TMP = read(PC);
	PC++;
	read(TMP);
	TMP2 = read(uint8_t(TMP+X));
	do_adc(TMP2);
	prefetch();

and_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	TMP2 = read(TMP);
	A &= TMP2;
	set_nz(A);
	prefetch();

and_abx
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	if(page_changing(TMP, X)) {
		read(set_l(TMP, TMP+X));
	}
	TMP += X;
	TMP2 = read(TMP);
	A &= TMP2;
	set_nz(A);
	prefetch();

and_aby
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	if(page_changing(TMP, Y)) {
		read(set_l(TMP, TMP+Y));
	}
	TMP += Y;
	TMP2 = read(TMP);
	A &= TMP2;
	set_nz(A);
	prefetch();

and_imm
	TMP = read(PC);
	PC++;
	A &= TMP;
	set_nz(A);
	prefetch();

and_idx
	TMP2 = read(PC);
	PC++;
	read(TMP2);
	TMP2 += X;
	TMP = read(TMP2 & 0xff);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	TMP2 = read(TMP);
	A &= TMP2;
	set_nz(A);
	prefetch();

and_idy
	TMP2 = read(PC);
	PC++;
	TMP = read(TMP2);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	if(page_changing(TMP, Y)) {
		read(set_l(TMP, TMP+Y));
	}
	TMP2 = read(TMP+Y);
	A &= TMP2;
	set_nz(A);
	prefetch();

and_zpg
	TMP = read(PC);
	PC++;
	TMP2 = read(TMP);
	A &= TMP2;
	set_nz(A);
	prefetch();

and_zpx
	TMP = read(PC);
	PC++;
	read(TMP);
	TMP2 = read(uint8_t(TMP+X));
	A &= TMP2;
	set_nz(A);
	prefetch();

asl_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_asl(TMP2);
	write(TMP, TMP2);
	prefetch();

asl_abx
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	read(set_l(TMP, TMP+X));
	TMP += X;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_asl(TMP2);
	write(TMP, TMP2);
	prefetch();

asl_acc
	read(PC);
	A = do_asl(A);
	prefetch();

asl_zpg
	TMP = read(PC);
	PC++;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_asl(TMP2);
	write(TMP, TMP2);
	prefetch();

asl_zpx
	TMP = read(PC);
	PC++;
	read(TMP);
	TMP = uint8_t(TMP+X);
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_asl(TMP2);
	write(TMP, TMP2);
	prefetch();

bcc_rel
	TMP = read(PC);
	PC++;
	if(!(P & F_C)) {
		read(PC);
		if(page_changing(PC, int8_t(TMP))) {
			read_arg(set_l(PC, PC+int8_t(TMP)));
		}
		PC += int8_t(TMP);
	}
	prefetch();

bcs_rel
	TMP = read(PC);
	PC++;
	if(P & F_C) {
		read(PC);
		if(page_changing(PC, int8_t(TMP))) {
			read_arg(set_l(PC, PC+int8_t(TMP)));
		}
		PC += int8_t(TMP);
	}
	prefetch();

beq_rel
	TMP = read(PC);
	PC++;
	if(P & F_Z) {
		read(PC);
		if(page_changing(PC, int8_t(TMP))) {
			read_arg(set_l(PC, PC+int8_t(TMP)));
		}
		PC += int8_t(TMP);
	}
	prefetch();

bit_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	TMP2 = read(TMP);
	do_bit(TMP2);
	prefetch();

bit_zpg
	TMP = read(PC);
	PC++;
	TMP2 = read(TMP);
	do_bit(TMP2);
	prefetch();

bmi_rel
	TMP = read(PC);
	PC++;
	if(P & F_N) {
		read(PC);
		if(page_changing(PC, int8_t(TMP))) {
			read_arg(set_l(PC, PC+int8_t(TMP)));
		}
		PC += int8_t(TMP);
	}
	prefetch();

bne_rel
	TMP = read(PC);
	PC++;
	if(!(P & F_Z)) {
		read(PC);
		if(page_changing(PC, int8_t(TMP))) {
			read_arg(set_l(PC, PC+int8_t(TMP)));
		}
		PC += int8_t(TMP);
	}
	prefetch();

bpl_rel
	TMP = read(PC);
	PC++;
	if(!(P & F_N)) {
		read(PC);
		if(page_changing(PC, int8_t(TMP))) {
			read_arg(set_l(PC, PC+int8_t(TMP)));
		}
		PC += int8_t(TMP);
	}
	prefetch();

brk_imp
	// The 6502 bug when a nmi occurs in a brk is reproduced (case !irq_taken && nmi_pending)
	if(irq_taken) {
		read(PC);
	} else {
		read(PC);
		PC++;
	}
	write(SP, PC >> 8);
	dec_SP();
	write(SP, PC);
	dec_SP();
	write(SP, irq_taken ? P & ~F_B : P);
	dec_SP();
	if(nmi_pending) {
		standard_irq_callback(NMI_LINE, PC);
		PC = read_arg(0xfffa);
		PC = set_h(PC, read_arg(0xfffb));
		nmi_pending = false;
	} else {
		if(irq_taken)
			standard_irq_callback(IRQ_LINE, PC);
		PC = read_arg(0xfffe);
		PC = set_h(PC, read_arg(0xffff));
	}
	irq_taken = false;
	P |= F_I; // Do *not* move after the prefetch
	prefetch();
	inst_state = -1;

bvc_rel
	TMP = read(PC);
	PC++;
	if(!(P & F_V)) {
		read(PC);
		if(page_changing(PC, int8_t(TMP))) {
			read_arg(set_l(PC, PC+int8_t(TMP)));
		}
		PC += int8_t(TMP);
	}
	prefetch();

bvs_rel
	TMP = read(PC);
	PC++;
	if(P & F_V) {
		read(PC);
		if(page_changing(PC, int8_t(TMP))) {
			read_arg(set_l(PC, PC+int8_t(TMP)));
		}
		PC += int8_t(TMP);
	}
	prefetch();

clc_imp
	read(PC);
	P &= ~F_C;
	prefetch();

cld_imp
	read(PC);
	P &= ~F_D;
	prefetch();

cli_imp
	read(PC);
	prefetch();
	P &= ~F_I; // Do *not* move it before the prefetch

clv_imp
	read(PC);
	P &= ~F_V;
	prefetch();

cmp_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	TMP2 = read(TMP);
	do_cmp(A, TMP2);
	prefetch();

cmp_abx
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	if(page_changing(TMP, X)) {
		read(set_l(TMP, TMP+X));
	}
	TMP += X;
	TMP2 = read(TMP);
	do_cmp(A, TMP2);
	prefetch();

cmp_aby
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	if(page_changing(TMP, Y)) {
		read(set_l(TMP, TMP+Y));
	}
	TMP += Y;
	TMP2 = read(TMP);
	do_cmp(A, TMP2);
	prefetch();

cmp_idx
	TMP2 = read(PC);
	PC++;
	read(TMP2);
	TMP2 += X;
	TMP = read(TMP2 & 0xff);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	TMP2 = read(TMP);
	do_cmp(A, TMP2);
	prefetch();

cmp_idy
	TMP2 = read(PC);
	PC++;
	TMP = read(TMP2);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	if(page_changing(TMP, Y)) {
		read(set_l(TMP, TMP+Y));
	}
	TMP2 = read(TMP+Y);
	do_cmp(A, TMP2);
	prefetch();

cmp_imm
	TMP = read(PC);
	PC++;
	do_cmp(A, TMP);
	prefetch();

cmp_zpg
	TMP = read(PC);
	PC++;
	TMP2 = read(TMP);
	do_cmp(A, TMP2);
	prefetch();

cmp_zpx
	TMP = read(PC);
	PC++;
	read(TMP);
	TMP2 = read(uint8_t(TMP+X));
	do_cmp(A, TMP2);
	prefetch();

cpx_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	TMP2 = read(TMP);
	do_cmp(X, TMP2);
	prefetch();

cpx_imm
	TMP = read(PC);
	PC++;
	do_cmp(X, TMP);
	prefetch();

cpx_zpg
	TMP = read(PC);
	PC++;
	TMP2 = read(TMP);
	do_cmp(X, TMP2);
	prefetch();

cpy_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	TMP2 = read(TMP);
	do_cmp(Y, TMP2);
	prefetch();

cpy_imm
	TMP = read(PC);
	PC++;
	do_cmp(Y, TMP);
	prefetch();

cpy_zpg
	TMP = read(PC);
	PC++;
	TMP2 = read(TMP);
	do_cmp(Y, TMP2);
	prefetch();

dec_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2--;
	set_nz(TMP2);
	write(TMP, TMP2);
	prefetch();

dec_abx
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	read(set_l(TMP, TMP+X));
	TMP += X;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2--;
	set_nz(TMP2);
	write(TMP, TMP2);
	prefetch();

dec_zpg
	TMP = read(PC);
	PC++;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2--;
	set_nz(TMP2);
	write(TMP, TMP2);
	prefetch();

dec_zpx
	TMP = read(PC);
	PC++;
	read(TMP);
	TMP = uint8_t(TMP+X);
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2--;
	set_nz(TMP2);
	write(TMP, TMP2);
	prefetch();

dex_imp
	read(PC);
	X--;
	set_nz(X);
	prefetch();

dey_imp
	read(PC);
	Y--;
	set_nz(Y);
	prefetch();

eor_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	TMP2 = read(TMP);
	A ^= TMP2;
	set_nz(A);
	prefetch();

eor_abx
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	if(page_changing(TMP, X)) {
		read(set_l(TMP, TMP+X));
	}
	TMP += X;
	TMP2 = read(TMP);
	A ^= TMP2;
	set_nz(A);
	prefetch();

eor_aby
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	if(page_changing(TMP, Y)) {
		read(set_l(TMP, TMP+Y));
	}
	TMP += Y;
	TMP2 = read(TMP);
	A ^= TMP2;
	set_nz(A);
	prefetch();

eor_idx
	TMP2 = read(PC);
	PC++;
	read(TMP2);
	TMP2 += X;
	TMP = read(TMP2 & 0xff);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	TMP2 = read(TMP);
	A ^= TMP2;
	set_nz(A);
	prefetch();

eor_idy
	TMP2 = read(PC);
	PC++;
	TMP = read(TMP2);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	if(page_changing(TMP, Y)) {
		read(set_l(TMP, TMP+Y));
	}
	TMP2 = read(TMP+Y);
	A ^= TMP2;
	set_nz(A);
	prefetch();

eor_imm
	TMP = read(PC);
	PC++;
	A ^= TMP;
	set_nz(A);
	prefetch();

eor_zpg
	TMP = read(PC);
	PC++;
	TMP2 = read(TMP);
	A ^= TMP2;
	set_nz(A);
	prefetch();

eor_zpx
	TMP = read(PC);
	PC++;
	read(TMP);
	TMP2 = read(uint8_t(TMP+X));
	A ^= TMP2;
	set_nz(A);
	prefetch();

inc_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2++;
	set_nz(TMP2);
	write(TMP, TMP2);
	prefetch();

inc_abx
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	read(set_l(TMP, TMP+X));
	TMP += X;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2++;
	set_nz(TMP2);
	write(TMP, TMP2);
	prefetch();

inc_zpg
	TMP = read(PC);
	PC++;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2++;
	set_nz(TMP2);
	write(TMP, TMP2);
	prefetch();

inc_zpx
	TMP = read(PC);
	PC++;
	read(TMP);
	TMP = uint8_t(TMP+X);
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2++;
	set_nz(TMP2);
	write(TMP, TMP2);
	prefetch();

inx_imp
	read(PC);
	X++;
	set_nz(X);
	prefetch();

iny_imp
	read(PC);
	Y++;
	set_nz(Y);
	prefetch();

jmp_adr
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC = TMP;
	prefetch();

jmp_ind
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	PC = read(TMP);
	PC = set_h(PC, read(set_l(TMP, TMP+1)));
	prefetch();

jsr_adr
	TMP = read(PC);
	PC++;
	read(SP);
	write(SP, PC>>8);
	dec_SP();
	write(SP, PC);
	dec_SP();
	TMP = set_h(TMP, read(PC));
	PC = TMP;
	prefetch();

lda_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	A = read(TMP);
	set_nz(A);
	prefetch();

lda_abx
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	if(page_changing(TMP, X)) {
		read(set_l(TMP, TMP+X));
	}
	A = read(TMP + X);
	set_nz(A);
	prefetch();

lda_aby
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	if(page_changing(TMP, Y)) {
		read(set_l(TMP, TMP+Y));
	}
	A = read(TMP + Y);
	set_nz(A);
	prefetch();

lda_idx
	TMP2 = read(PC);
	PC++;
	read(TMP2);
	TMP2 += X;
	TMP = read(TMP2 & 0xff);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	A = read(TMP);
	set_nz(A);
	prefetch();

lda_idy
	TMP2 = read(PC);
	PC++;
	TMP = read(TMP2);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	if(page_changing(TMP, Y)) {
		read(set_l(TMP, TMP+Y));
	}
	A = read(TMP+Y);
	set_nz(A);
	prefetch();

lda_imm
	A = read(PC);
	PC++;
	set_nz(A);
	prefetch();

lda_zpg
	TMP = read(PC);
	PC++;
	A = read(TMP);
	set_nz(A);
	prefetch();

lda_zpx
	TMP = read(PC);
	PC++;
	read(TMP);
	A = read(uint8_t(TMP+X));
	set_nz(A);
	prefetch();

ldx_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	X = read(TMP);
	set_nz(X);
	prefetch();

ldx_aby
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	if(page_changing(TMP, Y)) {
		read(set_l(TMP, TMP+Y));
	}
	X = read(TMP + Y);
	set_nz(X);
	prefetch();

ldx_imm
	X = read(PC);
	PC++;
	set_nz(X);
	prefetch();

ldx_zpg
	TMP = read(PC);
	PC++;
	X = read(TMP);
	set_nz(X);
	prefetch();

ldx_zpy
	TMP = read(PC);
	PC++;
	read(TMP);
	X = read(uint8_t(TMP+Y));
	set_nz(X);
	prefetch();

ldy_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	Y = read(TMP);
	set_nz(Y);
	prefetch();

ldy_abx
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	if(page_changing(TMP, X)) {
		read(set_l(TMP, TMP+X));
	}
	TMP += X;
	Y = read(TMP);
	set_nz(Y);
	prefetch();

ldy_imm
	Y = read(PC);
	PC++;
	set_nz(Y);
	prefetch();

ldy_zpg
	TMP = read(PC);
	PC++;
	Y = read(TMP);
	set_nz(Y);
	prefetch();

ldy_zpx
	TMP = read(PC);
	PC++;
	read(TMP);
	Y = read(uint8_t(TMP+X));
	set_nz(Y);
	prefetch();

lsr_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_lsr(TMP2);
	write(TMP, TMP2);
	prefetch();

lsr_abx
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	read(set_l(TMP, TMP+X));
	TMP += X;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_lsr(TMP2);
	write(TMP, TMP2);
	prefetch();

lsr_acc
	read(PC);
	A = do_lsr(A);
	prefetch();

lsr_zpg
	TMP = read(PC);
	PC++;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_lsr(TMP2);
	write(TMP, TMP2);
	prefetch();

lsr_zpx
	TMP = read(PC);
	PC++;
	read(TMP);
	TMP = uint8_t(TMP+X);
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_lsr(TMP2);
	write(TMP, TMP2);
	prefetch();

nop_imp
	read(PC);
	prefetch();

ora_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	TMP2 = read(TMP);
	A |= TMP2;
	set_nz(A);
	prefetch();

ora_abx
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	if(page_changing(TMP, X)) {
		read(set_l(TMP, TMP+X));
	}
	TMP += X;
	TMP2 = read(TMP);
	A |= TMP2;
	set_nz(A);
	prefetch();

ora_aby
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	if(page_changing(TMP, Y)) {
		read(set_l(TMP, TMP+Y));
	}
	TMP += Y;
	TMP2 = read(TMP);
	A |= TMP2;
	set_nz(A);
	prefetch();

ora_imm
	TMP = read(PC);
	PC++;
	A |= TMP;
	set_nz(A);
	prefetch();

ora_idx
	TMP2 = read(PC);
	PC++;
	read(TMP2);
	TMP2 += X;
	TMP = read(TMP2 & 0xff);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	TMP2 = read(TMP);
	A |= TMP2;
	set_nz(A);
	prefetch();

ora_idy
	TMP2 = read(PC);
	PC++;
	TMP = read(TMP2);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	if(page_changing(TMP, Y)) {
		read(set_l(TMP, TMP+Y));
	}
	TMP2 = read(TMP+Y);
	A |= TMP2;
	set_nz(A);
	prefetch();

ora_zpg
	TMP = read(PC);
	PC++;
	TMP2 = read(TMP);
	A |= TMP2;
	set_nz(A);
	prefetch();

ora_zpx
	TMP = read(PC);
	PC++;
	read(TMP);
	TMP2 = read(uint8_t(TMP+X));
	A |= TMP2;
	set_nz(A);
	prefetch();

pha_imp
	read(PC);
	write(SP, A);
	dec_SP();
	prefetch();

php_imp
	read(PC);
	write(SP, P);
	dec_SP();
	prefetch();

pla_imp
	read(PC);
	read(SP);
	inc_SP();
	A = read(SP);
	set_nz(A);
	prefetch();

plp_imp
	read(PC);
	read(SP);
	inc_SP();
	TMP = read(SP) | (F_B|F_E);
	prefetch();
	P = TMP; // Do *not* move it before the prefetch

rol_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_rol(TMP2);
	write(TMP, TMP2);
	prefetch();

rol_abx
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	read(set_l(TMP, TMP+X));
	TMP += X;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_rol(TMP2);
	write(TMP, TMP2);
	prefetch();

rol_acc
	read(PC);
	A = do_rol(A);
	prefetch();

rol_zpg
	TMP = read(PC);
	PC++;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_rol(TMP2);
	write(TMP, TMP2);
	prefetch();

rol_zpx
	TMP = read(PC);
	PC++;
	read(TMP);
	TMP = uint8_t(TMP+X);
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_rol(TMP2);
	write(TMP, TMP2);
	prefetch();

ror_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_ror(TMP2);
	write(TMP, TMP2);
	prefetch();

ror_abx
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	read(set_l(TMP, TMP+X));
	TMP += X;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_ror(TMP2);
	write(TMP, TMP2);
	prefetch();

ror_acc
	read(PC);
	A = do_ror(A);
	prefetch();

ror_zpg
	TMP = read(PC);
	PC++;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_ror(TMP2);
	write(TMP, TMP2);
	prefetch();

ror_zpx
	TMP = read(PC);
	PC++;
	read(TMP);
	TMP = uint8_t(TMP+X);
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_ror(TMP2);
	write(TMP, TMP2);
	prefetch();

rti_imp
	read(PC);
	read(SP);
	inc_SP();
	P = read(SP) | (F_B|F_E);
	inc_SP();
	PC = read(SP);
	inc_SP();
	PC = set_h(PC, read(SP));
	prefetch();

rts_imp
	read(PC);
	read(SP);
	inc_SP();
	PC = read(SP);
	inc_SP();
	PC = set_h(PC, read(SP));
	read(PC);
	PC++;
	prefetch();

sbc_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	TMP2 = read(TMP);
	do_sbc(TMP2);
	prefetch();

sbc_abx
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	if(page_changing(TMP, X)) {
		read(set_l(TMP, TMP+X));
	}
	TMP += X;
	TMP2 = read(TMP);
	do_sbc(TMP2);
	prefetch();

sbc_aby
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	if(page_changing(TMP, Y)) {
		read(set_l(TMP, TMP+Y));
	}
	TMP += Y;
	TMP2 = read(TMP);
	do_sbc(TMP2);
	prefetch();

sbc_idx
	TMP2 = read(PC);
	PC++;
	read(TMP2);
	TMP2 += X;
	TMP = read(TMP2 & 0xff);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	TMP2 = read(TMP);
	do_sbc(TMP2);
	prefetch();

sbc_idy
	TMP2 = read(PC);
	PC++;
	TMP = read(TMP2);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	if(page_changing(TMP, Y)) {
		read(set_l(TMP, TMP+Y));
	}
	TMP2 = read(TMP+Y);
	do_sbc(TMP2);
	prefetch();

sbc_imm
	TMP = read(PC);
	PC++;
	do_sbc(TMP);
	prefetch();

sbc_zpg
	TMP = read(PC);
	PC++;
	TMP2 = read(TMP);
	do_sbc(TMP2);
	prefetch();

sbc_zpx
	TMP = read(PC);
	PC++;
	read(TMP);
	TMP2 = read(uint8_t(TMP+X));
	do_sbc(TMP2);
	prefetch();

sec_imp
	read(PC);
	P |= F_C;
	prefetch();

sed_imp
	read(PC);
	P |= F_D;
	prefetch();

sei_imp
	read(PC);
	prefetch();
	P |= F_I; // Do *not* move it before the prefetch

sta_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	write(TMP, A);
	prefetch();

sta_abx
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	read(set_l(TMP, TMP+X));
	write(TMP+X, A);
	prefetch();

sta_aby
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	read(set_l(TMP, TMP+Y));
	write(TMP+Y, A);
	prefetch();

sta_idx
	TMP2 = read(PC);
	PC++;
	read(TMP2);
	TMP2 += X;
	TMP = read(TMP2 & 0xff);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	write(TMP, A);
	prefetch();

sta_idy
	TMP2 = read(PC);
	PC++;
	TMP = read(TMP2);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	read(set_l(TMP, TMP+Y));
	write(TMP+Y, A);
	prefetch();

sta_zpg
	TMP = read(PC);
	PC++;
	write(TMP, A);
	prefetch();

sta_zpx
	TMP = read(PC);
	PC++;
	read(TMP);
	write(uint8_t(TMP+X), A);
	prefetch();

stx_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	write(TMP, X);
	prefetch();

stx_zpg
	TMP = read(PC);
	PC++;
	write(TMP, X);
	prefetch();

stx_zpy
	TMP = read(PC);
	PC++;
	read(TMP);
	write(uint8_t(TMP+Y), X);
	prefetch();

sty_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	write(TMP, Y);
	prefetch();

sty_zpg
	TMP = read(PC);
	PC++;
	write(TMP, Y);
	prefetch();

sty_zpx
	TMP = read(PC);
	PC++;
	read(TMP);
	write(uint8_t(TMP+X), Y);
	prefetch();

tax_imp
	read(PC);
	X = A;
	set_nz(X);
	prefetch();

tay_imp
	read(PC);
	Y = A;
	set_nz(Y);
	prefetch();

tsx_imp
	read(PC);
	X = SP;
	set_nz(X);
	prefetch();

txa_imp
	read(PC);
	A = X;
	set_nz(A);
	prefetch();

txs_imp
	read(PC);
	SP = set_l(SP, X);
	prefetch();

tya_imp
	read(PC);
	A = Y;
	set_nz(A);
	prefetch();

#   exceptions
reset
	read(PC);
	read(PC);
	read(SP);
	dec_SP();
	read(SP);
	dec_SP();
	read(SP);
	dec_SP();
	P |= F_I;
	PC = read_arg(0xfffc);
	PC = set_h(PC, read_arg(0xfffd));
	prefetch();
	inst_state = -1;


#   undocumented reliable instructions
dcp_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2--;
	write(TMP, TMP2);
	do_cmp(A, TMP2);
	prefetch();

dcp_abx
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	read(set_l(TMP, TMP+X));
	TMP += X;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2--;
	write(TMP, TMP2);
	do_cmp(A, TMP2);
	prefetch();

dcp_aby
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	read(set_l(TMP, TMP+Y));
	TMP += Y;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2--;
	write(TMP, TMP2);
	do_cmp(A, TMP2);
	prefetch();

dcp_idx
	TMP2 = read(PC);
	PC++;
	read(TMP2);
	TMP2 += X;
	TMP = read(TMP2 & 0xff);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2--;
	write(TMP, TMP2);
	do_cmp(A, TMP2);
	prefetch();

dcp_idy
	TMP2 = read(PC);
	PC++;
	TMP = read(TMP2);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	read(set_l(TMP, TMP+Y));
	TMP += Y;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2--;
	write(TMP, TMP2);
	do_cmp(A, TMP2);
	prefetch();

dcp_zpg
	TMP = read(PC);
	PC++;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2--;
	write(TMP, TMP2);
	do_cmp(A, TMP2);
	prefetch();

dcp_zpx
	TMP = read(PC);
	PC++;
	read(TMP);
	TMP = uint8_t(TMP+X);
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2--;
	write(TMP, TMP2);
	do_cmp(A, TMP2);
	prefetch();

isb_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2++;
	write(TMP, TMP2);
	do_sbc(TMP2);
	prefetch();

isb_abx
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	read(set_l(TMP, TMP+X));
	TMP += X;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2++;
	write(TMP, TMP2);
	do_sbc(TMP2);
	prefetch();

isb_aby
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	read(set_l(TMP, TMP+Y));
	TMP += Y;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2++;
	write(TMP, TMP2);
	do_sbc(TMP2);
	prefetch();

isb_idx
	TMP2 = read(PC);
	PC++;
	read(TMP2);
	TMP2 += X;
	TMP = read(TMP2 & 0xff);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2++;
	write(TMP, TMP2);
	do_sbc(TMP2);
	prefetch();

isb_idy
	TMP2 = read(PC);
	PC++;
	TMP = read(TMP2);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	read(set_l(TMP, TMP+Y));
	TMP += Y;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2++;
	write(TMP, TMP2);
	do_sbc(TMP2);
	prefetch();

isb_zpg
	TMP = read(PC);
	PC++;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2++;
	write(TMP, TMP2);
	do_sbc(TMP2);
	prefetch();

isb_zpx
	TMP = read(PC);
	PC++;
	read(TMP);
	TMP = uint8_t(TMP+X);
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2++;
	write(TMP, TMP2);
	do_sbc(TMP2);
	prefetch();

lax_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	A = X = read(TMP);
	set_nz(A);
	prefetch();

lax_aby
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	if(page_changing(TMP, Y)) {
		read(set_l(TMP, TMP+Y));
	}
	A = X = read(TMP+Y);
	set_nz(A);
	prefetch();

lax_idx
	TMP2 = read(PC);
	PC++;
	read(TMP2);
	TMP2 += X;
	TMP = read(TMP2 & 0xff);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	A = X = read(TMP);
	set_nz(A);
	prefetch();

lax_idy
	TMP2 = read(PC);
	PC++;
	TMP = read(TMP2);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	if(page_changing(TMP, Y)) {
		read(set_l(TMP, TMP+Y));
	}
	A = X = read(TMP+Y);
	set_nz(A);
	prefetch();

lax_zpg
	TMP = read(PC);
	PC++;
	A = X = read(TMP);
	set_nz(A);
	prefetch();

lax_zpy
	TMP = read(PC);
	PC++;
	read(TMP);
	TMP = uint8_t(TMP+Y);
	A = X = read(TMP);
	set_nz(A);
	prefetch();

rla_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_rol(TMP2);
	write(TMP, TMP2);
	A &= TMP2;
	set_nz(A);
	prefetch();

rla_abx
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	read(set_l(TMP, TMP+X));
	TMP += X;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_rol(TMP2);
	write(TMP, TMP2);
	A &= TMP2;
	set_nz(A);
	prefetch();

rla_aby
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	read(set_l(TMP, TMP+Y));
	TMP += Y;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_rol(TMP2);
	write(TMP, TMP2);
	A &= TMP2;
	set_nz(A);
	prefetch();

rla_idx
	TMP2 = read(PC);
	PC++;
	read(TMP2);
	TMP2 += X;
	TMP = read(TMP2 & 0xff);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_rol(TMP2);
	write(TMP, TMP2);
	A &= TMP2;
	set_nz(A);
	prefetch();

rla_idy
	TMP2 = read(PC);
	PC++;
	TMP = read(TMP2);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	read(set_l(TMP, TMP+Y));
	TMP += Y;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_rol(TMP2);
	write(TMP, TMP2);
	A &= TMP2;
	set_nz(A);
	prefetch();

rla_zpg
	TMP = read(PC);
	PC++;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_rol(TMP2);
	write(TMP, TMP2);
	A &= TMP2;
	set_nz(A);
	prefetch();

rla_zpx
	TMP = read(PC);
	PC++;
	read(TMP);
	TMP = uint8_t(TMP+X);
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_rol(TMP2);
	write(TMP, TMP2);
	A &= TMP2;
	set_nz(A);
	prefetch();

rra_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_ror(TMP2);
	write(TMP, TMP2);
	do_adc(TMP2);
	prefetch();

rra_abx
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	read(set_l(TMP, TMP+X));
	TMP += X;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_ror(TMP2);
	write(TMP, TMP2);
	do_adc(TMP2);
	prefetch();

rra_aby
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	read(set_l(TMP, TMP+Y));
	TMP += Y;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_ror(TMP2);
	write(TMP, TMP2);
	do_adc(TMP2);
	prefetch();

rra_idx
	TMP2 = read(PC);
	PC++;
	read(TMP2);
	TMP2 += X;
	TMP = read(TMP2 & 0xff);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_ror(TMP2);
	write(TMP, TMP2);
	do_adc(TMP2);
	prefetch();

rra_idy
	TMP2 = read(PC);
	PC++;
	TMP = read(TMP2);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	read(set_l(TMP, TMP+Y));
	TMP += Y;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_ror(TMP2);
	write(TMP, TMP2);
	do_adc(TMP2);
	prefetch();

rra_zpg
	TMP = read(PC);
	PC++;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_ror(TMP2);
	write(TMP, TMP2);
	do_adc(TMP2);
	prefetch();

rra_zpx
	TMP = read(PC);
	PC++;
	read(TMP);
	TMP = uint8_t(TMP+X);
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_ror(TMP2);
	write(TMP, TMP2);
	do_adc(TMP2);
	prefetch();

sax_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	TMP2 = A & X;
	write(TMP, TMP2);
	prefetch();

sax_idx
	TMP2 = read(PC);
	PC++;
	read(TMP2);
	TMP2 += X;
	TMP = read(TMP2 & 0xff);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	TMP2 = A & X;
	write(TMP, TMP2);
	prefetch();

sax_zpg
	TMP = read(PC);
	PC++;
	TMP2 = A & X;
	write(TMP, TMP2);
	prefetch();

sax_zpy
	TMP = read(PC);
	PC++;
	read(TMP);
	TMP = uint8_t(TMP+Y);
	TMP2 = A & X;
	write(TMP, TMP2);
	prefetch();

sbx_imm
	TMP2 = read(PC);
	PC++;
	X &= A;
	if(X < TMP2)
		P &= ~F_C;
	else
		P |= F_C;
	X -= TMP2;
	set_nz(X);
	prefetch();

sha_aby
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	read(set_l(TMP, TMP+Y));
	TMP2 = A & X & ((TMP >> 8)+1);
	if(page_changing(TMP, Y))
		TMP = set_h(TMP+Y, TMP2);
	else
		TMP += Y;
	write(TMP, TMP2);
	prefetch();

sha_idy
	TMP2 = read(PC);
	PC++;
	TMP = read(TMP2);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	read(set_l(TMP, TMP+Y));
	TMP2 = A & X & ((TMP >> 8)+1);
	if(page_changing(TMP, Y))
		TMP = set_h(TMP+Y, TMP2);
	else
		TMP += Y;
	write(TMP, TMP2);
	prefetch();

shs_aby
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	read(set_l(TMP, TMP+Y));
	SP = set_l(SP, A & X);
	TMP2 = A & X & ((TMP >> 8)+1);
	if(page_changing(TMP, Y))
		TMP = set_h(TMP+Y, TMP2);
	else
		TMP += Y;
	write(TMP, TMP2);
	prefetch();

shx_aby
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	read(set_l(TMP, TMP+Y));
	TMP2 = X & ((TMP >> 8)+1);
	if(page_changing(TMP, Y))
		TMP = set_h(TMP+Y, TMP2);
	else
		TMP += Y;
	write(TMP, TMP2);
	prefetch();

shy_abx
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	read(set_l(TMP, TMP+X));
	TMP2 = Y & ((TMP >> 8)+1);
	if(page_changing(TMP, X))
		TMP = set_h(TMP+X, TMP2);
	else
		TMP += X;
	write(TMP, TMP2);
	prefetch();

slo_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_asl(TMP2);
	write(TMP, TMP2);
	A |= TMP2;
	set_nz(A);
	prefetch();

slo_abx
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	read(set_l(TMP, TMP+X));
	TMP += X;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_asl(TMP2);
	write(TMP, TMP2);
	A |= TMP2;
	set_nz(A);
	prefetch();

slo_aby
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	read(set_l(TMP, TMP+Y));
	TMP += Y;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_asl(TMP2);
	write(TMP, TMP2);
	A |= TMP2;
	set_nz(A);
	prefetch();

slo_idx
	TMP2 = read(PC);
	PC++;
	read(TMP2);
	TMP2 += X;
	TMP = read(TMP2 & 0xff);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_asl(TMP2);
	write(TMP, TMP2);
	A |= TMP2;
	set_nz(A);
	prefetch();

slo_idy
	TMP2 = read(PC);
	PC++;
	TMP = read(TMP2);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	read(set_l(TMP, TMP+Y));
	TMP += Y;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_asl(TMP2);
	write(TMP, TMP2);
	A |= TMP2;
	set_nz(A);
	prefetch();

slo_zpg
	TMP = read(PC);
	PC++;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_asl(TMP2);
	write(TMP, TMP2);
	A |= TMP2;
	set_nz(A);
	prefetch();

slo_zpx
	TMP = read(PC);
	PC++;
	read(TMP);
	TMP = uint8_t(TMP+X);
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_asl(TMP2);
	write(TMP, TMP2);
	A |= TMP2;
	set_nz(A);
	prefetch();

sre_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_lsr(TMP2);
	write(TMP, TMP2);
	A ^= TMP2;
	set_nz(A);
	prefetch();

sre_abx
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	read(set_l(TMP, TMP+X));
	TMP += X;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_lsr(TMP2);
	write(TMP, TMP2);
	A ^= TMP2;
	set_nz(A);
	prefetch();

sre_aby
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	read(set_l(TMP, TMP+Y));
	TMP += Y;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_lsr(TMP2);
	write(TMP, TMP2);
	A ^= TMP2;
	set_nz(A);
	prefetch();

sre_idx
	TMP2 = read(PC);
	PC++;
	read(TMP2);
	TMP2 += X;
	TMP = read(TMP2 & 0xff);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_lsr(TMP2);
	write(TMP, TMP2);
	A ^= TMP2;
	set_nz(A);
	prefetch();

sre_idy
	TMP2 = read(PC);
	PC++;
	TMP = read(TMP2);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	read(set_l(TMP, TMP+Y));
	TMP += Y;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_lsr(TMP2);
	write(TMP, TMP2);
	A ^= TMP2;
	set_nz(A);
	prefetch();

sre_zpg
	TMP = read(PC);
	PC++;
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_lsr(TMP2);
	write(TMP, TMP2);
	A ^= TMP2;
	set_nz(A);
	prefetch();

sre_zpx
	TMP = read(PC);
	PC++;
	read(TMP);
	TMP = uint8_t(TMP+X);
	TMP2 = read(TMP);
	write(TMP, TMP2);
	TMP2 = do_lsr(TMP2);
	write(TMP, TMP2);
	A ^= TMP2;
	set_nz(A);
	prefetch();

# undocumented unreliable instructions
anc_imm
	TMP = read(PC);
	PC++;
	A &= TMP;
	set_nz(A);
	if(A & 0x80)
		P |= F_C;
	else
		P &= ~F_C;
	prefetch();

ane_imm
	TMP = read(PC);
	PC++;
	A &= TMP & X;
	set_nz(A);
	prefetch();

asr_imm
	TMP = read(PC);
	PC++;
	A = do_lsr(A & TMP);
	prefetch();

arr_imm
	TMP = read(PC);
	PC++;
    A &= TMP;
	do_arr();
	prefetch();

las_aby
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	if(page_changing(TMP, Y)) {
		read(set_l(TMP, TMP+Y));
	}
	TMP2 = read(TMP+Y);
	A = TMP2 | 0x51;
	X = 0xff;
	set_nz(TMP2);
	prefetch();

lxa_imm
	A = X = read(PC);
	PC++;
	set_nz(A);
	prefetch();

# nop variants
nop_aba
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	read(TMP);
	prefetch();

nop_abx
	TMP = read(PC);
	PC++;
	TMP = set_h(TMP, read(PC));
	PC++;
	if(page_changing(TMP, X)) {
		read(set_l(TMP, TMP+X));
	}
	read(TMP + X);
	prefetch();

nop_imm
	read(PC);
	PC++;
	prefetch();

nop_zpg
	TMP = read(PC);
	PC++;
	read(TMP);
	prefetch();

nop_zpx
	TMP = read(PC);
	PC++;
	read(TMP);
	read(uint8_t(TMP+X));
	prefetch();

# system killers
kil_non
	read(PC);
	PC++;
	read(0xffff);
	read(0xfffe);
	read(0xfffe);
	for(;;) {
		read(0xffff);
	}
